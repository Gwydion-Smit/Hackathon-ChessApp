@page "/Game"
@using Toolbelt.Blazor.SpeechRecognition
@using System.Text.RegularExpressions
@using Toolbelt.Blazor.SpeechSynthesis 
@using System
@inject SpeechRecognition speech_recognition
@inject SpeechSynthesis speech_synthesis
@implements IDisposable

<head>
  <meta charset="UTF-8">
  <title>POG</title>
  <link href="css/Game.razor.css" rel="stylesheet" />
</head>

<body>

<div id="game">
    <div class='cellprefix'>1</div>
    <div class='gamecell grey' id='1_8'>@pog[0]</div>
    <div class='gamecell' id='2_8'>@pog[1]</div>
    <div class='gamecell grey' id='3_8'>@pog[2]</div>
    <div class='gamecell' id='4_8'>@pog[3]</div>
    <div class='gamecell grey' id='5_8'>@pog[4]</div>
    <div class='gamecell' id='6_8'>@pog[5]</div>
    <div class='gamecell grey' id='7_8'>@pog[6]</div>
    <div class='gamecell' id='8_8'>@pog[7]</div><br>

    <div class='cellprefix'>2</div>
    <div class='gamecell' id='1_7'>@pog[8]</div>
    <div class='gamecell grey' id='2_7'>@pog[9]</div>
    <div class='gamecell' id='3_7'>@pog[10]</div>
    <div class='gamecell grey' id='4_7'>@pog[11]</div>
    <div class='gamecell' id='5_7'>@pog[12]</div>
    <div class='gamecell grey' id='6_7'>@pog[13]</div>
    <div class='gamecell' id='7_7'>@pog[14]</div>
    <div class='gamecell grey' id='8_7'>@pog[15]</div><br>
    
    <div class='cellprefix'>3</div>
    <div class='gamecell grey' id='1_6'>@pog[16]</div>
    <div class='gamecell' id='2_6'>@pog[17]</div>
    <div class='gamecell grey' id='3_6'>@pog[18]</div>
    <div class='gamecell' id='4_6'>@pog[19]</div>
    <div class='gamecell grey' id='5_6'>@pog[20]</div>
    <div class='gamecell' id='6_6'>@pog[21]</div>
    <div class='gamecell grey' id='7_6'>@pog[22]</div>
    <div class='gamecell' id='8_6'>@pog[23]</div><br>
    
    <div class='cellprefix'>4</div>
    <div class='gamecell' id='1_5'>@pog[24]</div>
    <div class='gamecell grey' id='2_5'>@pog[25]</div>
    <div class='gamecell' id='3_5'>@pog[26]</div>
    <div class='gamecell grey' id='4_5'>@pog[27]</div>
    <div class='gamecell' id='5_5'>@pog[28]</div>
    <div class='gamecell grey' id='6_5'>@pog[29]</div>
    <div class='gamecell' id='7_5'>@pog[30]</div>
    <div class='gamecell grey' id='8_5'>@pog[31]</div><br>
    
    <div class='cellprefix'>5</div>
    <div class='gamecell grey' id='1_4'>@pog[32]</div>
    <div class='gamecell' id='2_4'>@pog[33]</div>
    <div class='gamecell grey' id='3_4'>@pog[34]</div>
    <div class='gamecell' id='4_4'>@pog[35]</div>
    <div class='gamecell grey' id='5_4'>@pog[36]</div>
    <div class='gamecell' id='6_4'>@pog[37]</div>
    <div class='gamecell grey' id='7_4'>@pog[38]</div>
    <div class='gamecell' id='8_4'>@pog[39]</div><br>

    <div class='cellprefix'>6</div>
    <div class='gamecell' id='1_3'>@pog[40]</div>
    <div class='gamecell grey' id='2_3'>@pog[41]</div>
    <div class='gamecell' id='3_3'>@pog[42]</div>
    <div class='gamecell grey' id='4_3'>@pog[43]</div>
    <div class='gamecell' id='5_3'>@pog[44]</div>
    <div class='gamecell grey' id='6_3'>@pog[45]</div>
    <div class='gamecell' id='7_3'>@pog[46]</div>
    <div class='gamecell grey' id='8_3'>@pog[47]</div><br>

    <div class='cellprefix'>7</div>
    <div class='gamecell grey' id='1_2'>@pog[48]</div>
    <div class='gamecell' id='2_2'>@pog[49]</div>
    <div class='gamecell grey' id='3_2'>@pog[50]</div>
    <div class='gamecell' id='4_2'>@pog[51]</div>
    <div class='gamecell grey' id='5_2'>@pog[52]</div>
    <div class='gamecell' id='6_2'>@pog[53]</div>
    <div class='gamecell grey' id='7_2'>@pog[54]</div>
    <div class='gamecell' id='8_2'>@pog[55]</div><br>

    <div class='cellprefix'>8</div>
    <div class='gamecell' id='1_1'>@pog[56]</div>
    <div class='gamecell grey' id='2_1'>@pog[57]</div>
    <div class='gamecell' id='3_1'>@pog[58]</div>
    <div class='gamecell grey' id='4_1'>@pog[59]</div>
    <div class='gamecell' id='5_1'>@pog[60]</div>
    <div class='gamecell grey' id='6_1'>@pog[61]</div>
    <div class='gamecell' id='7_1'>@pog[62]</div>
    <div class='gamecell grey' id='8_1'>@pog[63]</div><br>
    
    <div class='cellprefix'></div>
    <div class='cellprefix'>A</div>
    <div class='cellprefix'>B</div>
    <div class='cellprefix'>C</div>
    <div class='cellprefix'>D</div>
    <div class='cellprefix'>E</div>
    <div class='cellprefix'>F</div>
    <div class='cellprefix'>G</div>
    <div class='cellprefix'>H</div><br>
  </div>
  
  <!-- partial -->
  <!-- <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js'></script>
  <script  src="./script.js"></script> -->

</body>

<button @onclick="@play"></button> 

<button @onclick="@OnClickStart">start</button>

<button @onclick="@OnClickStop">stop</button>

<button @onclick="@doStuff">Refresh</button>

<div>
    @foreach (var result in this.Results)
    {
        @if (result.IsFinal)
        {
            <text>@(result.Items[0].Transcript)</text>
        }
        else
        {
            <i style="color:#ddd;">@(result.Items[0].Transcript)</i>
        }
    }
</div>



@code {
    public string[] pog = Enumerable.Repeat("", 64).ToArray(); 
    SpeechRecognitionResult[] Results = new SpeechRecognitionResult[0];
    Chess game = new Chess();

    Regex rx = new Regex(@"^\s*[a-zA-Z]{1}\d{1}\s*$");
    Square[,] board;
    int counter = 0;

    string origin = "";
    string destination = "";


    private void doStuff()
    {
      board = game.getBoard();
      counter = 0;
      for (int i = 0;i < 8; i++)
      {
       for (int j = 0; j < 8; j++)
       {
         if(board[i, j].hasPiece())
         {
           
           pog[counter] = board[i,j].getPiece().getSymbol();
         }
         else
         {
           pog[counter] = " ";
         }
         counter++;
       }
      }
    }

    

    protected void play()
    {
        game.main();
    }
    protected override void OnInitialized()
    {
       speech_recognition.InterimResults = true;
       speech_recognition.Continuous = true;
       speech_recognition.Result += OnSpeechRecognized;
    }

    void OnSpeechRecognized(object sender, SpeechRecognitionEventArgs args)
    {
      Results = args.Results.Skip(args.ResultIndex).ToArray();
      foreach (var result in Results)
       {
          if (result.IsFinal)
          {
              if (rx.IsMatch(result.Items[0].Transcript))
              {
                if (origin == "") {
                  origin = result.Items[0].Transcript; 
                  speech_synthesis.Speak("Tell me the destination");
                }
                else {
                  destination = result.Items[0].Transcript;
                  speech_synthesis.Speak("Would you like to play " + origin + " to " + destination);
            
                }
              }
              else if ((result.Items[0].Transcript.Trim(' ') == "yes" || result.Items[0].Transcript.Trim(' ') == "yeah"))
              {
                speech_synthesis.Speak("Okay");
                game.play(origin, destination);
                doStuff();
                //this.Dispose();
              } 
              else if(origin != "")
              {
                speech_synthesis.Speak("Tell me the destination");
              }
              else if (origin == "" && destination == "")
              {
                speech_synthesis.Speak("Tell me the origin");
              }      
         }
         
       }
      StateHasChanged();
    }
    async Task OnClickStart()
    {
      await speech_recognition.StartAsync();
    }
    async Task OnClickStop()
    {
        await speech_recognition.StopAsync();
    }
    
    public void Dispose()
    {
      speech_recognition.Result -= OnSpeechRecognized;
    }
}